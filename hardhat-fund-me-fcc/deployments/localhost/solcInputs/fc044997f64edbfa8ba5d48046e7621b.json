{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// Get funds from user\n// Withdraw funds\n// Set a minimum fundings value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    //minimum USD in 18Digit\n    uint256 public constant MINIMUM_USD = 10 * 1000000000000000000;\n    //this array stores addresses of funders\n    address[] public funders;\n    //Dictionary which shows Amount's been funded based on given address\n    mapping(address => uint256) public addressToAmountFunded;\n    //owner of this contract is to be assign\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    //to send fund\n    function fund() public payable {\n        //Checks given value either equal or above minimum else revert transaction\n        require(\n            PriceConverter.getConversionRate(msg.value, priceFeed) >=\n                MINIMUM_USD,\n            \"Did not send enough!\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n            //delete funders[funderIndex];\n        }\n        //reset array\n        funders = new address[](0);\n\n        //transfer\n        /*payable(msg.sender).transfer(address(this).balance);\n    //send\n    bool success = payable(msg.sender).send(address(this).balance);\n    require(success,\"Send fail\");\n    */\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed!\");\n    }\n\n    //function modifier executes before and/or after funtions intructions\n    modifier onlyOwner() {\n        //security check ,only owner of this contract can withdraw\n        //equire(msg.sender == i_owner,\"Sender is not owner!\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    //special function\n    //someone send eth without calling fund()\n    receive() external payable {\n        fund();\n    }\n\n    //special function\n    //someone send eth with wrong data calling fund()\n    fallback() external payable {\n        fund();\n    }\n}\n\n/* function getPrice()public view returns(uint256)\n    {\n        //ABI: \n        //Address: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419 //address of Chainlink eth-usd keeper\n        AggregatorV3Interface priceFeed = AggregatorV3Interface();\n        (,int price,,,) = priceFeed.latestRoundData();\n\n\n        return uint256(price * 1e10);// 1**10000000000\n    }\n\n\n    function getConversionrate(uint256 ethAmount)public view returns(uint256)\n    {\n        uint256 ethPrice = getPrice();\n        uint256 ethAmountInUSD =(ethPrice * ethAmount) / 1e18;\n\n        return ethAmountInUSD;\n    }*/\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Why is this a library and not abstract?\n// Why not an interface?\nlibrary PriceConverter {\n    // We could make this public, but then we'd have to deploy it\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n    }\n\n    // 1000000000\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}